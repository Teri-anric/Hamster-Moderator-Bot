import logging
import json
import asyncio
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from Bot_config import *

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏
try:
    with open(DATA_FILE, "r") as f:
        data = json.load(f)
except FileNotFoundError:
    data = {"muted_users": {}, "warnings": {}}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

# –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (reply, @, ID)
async def resolve_user(message: Message, args):
    if message.reply_to_message:
        return message.reply_to_message.from_user
    if len(args) < 2:
        return None
    target = args[-1]
    if target.startswith("@"):  # @username
        try:
            user = await bot.get_chat(target)
            return user
        except:
            return None
    elif target.isdigit():
        try:
            user = await bot.get_chat(int(target))
            return user
        except:
            return None
    return None

# /mute <—á–∞—Å> <–ø—Ä–∏—á–∏–Ω–∞> [@username|id|reply]
@dp.message(Command("mute"))
async def mute_user(message: Message):
    args = message.text.split()
    if message.reply_to_message:
        reason = " ".join(args[2:]) if len(args) >= 3 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
        target_user = message.reply_to_message.from_user
    else:
        if len(args) < 4:
            await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç: /mute 3h –°–ø–∞–º @user –∞–±–æ ID –∞–±–æ reply</b>")
            return
        reason = " ".join(args[2:-1])
        target_user = await resolve_user(message, args)
        if not target_user:
            await message.reply("<b>‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.</b>")
            return

    duration_str = args[1]
    time_multiplier = {"m": "minutes", "h": "hours", "d": "days", "w": "weeks"}

    try:
        unit = duration_str[-1]
        value = int(duration_str[:-1])
        if unit not in time_multiplier:
            raise ValueError

        delta = timedelta(**{time_multiplier[unit]: value})

        user_id = str(target_user.id)
        user_name = target_user.full_name
        admin_name = message.from_user.full_name

        mute_end_time = datetime.now() + delta
        data["muted_users"][user_id] = mute_end_time.isoformat()
        save_data(data)

        await message.answer(
            f"<b>üîá –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –∑–∞–≥–ª—É—à–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}</b>\n"
            f"<b>‚è∞ –î–æ {mute_end_time.strftime('%d.%m.%Y %H:%M')}</b>\n"
            f"<b>üìå –ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
        )

    except ValueError:
        await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç —á–∞—Å—É: 2h, 30m, 1d, 1w</b>")

# /unmute [@username|id|reply]
@dp.message(Command("unmute"))
async def unmute_user(message: Message):
    args = message.text.split()
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    else:
        if len(args) < 2:
            await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç: /unmute @user –∞–±–æ ID –∞–±–æ reply</b>")
            return
        target_user = await resolve_user(message, args)
        if not target_user:
            await message.reply("<b>‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.</b>")
            return

    user_id = str(target_user.id)
    user_name = target_user.full_name
    admin_name = message.from_user.full_name

    if user_id in data["muted_users"]:
        del data["muted_users"][user_id]
        save_data(data)
        await message.answer(f"<b>‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –∑–Ω—è–≤ –º—É—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}</b>")
    else:
        await message.reply("<b>‚ùó –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–≥–ª—É—à–µ–Ω–∏–π.</b>")

# /warn <–ø—Ä–∏—á–∏–Ω–∞> [@username|id|reply]
@dp.message(Command("warn"))
async def warn_user(message: Message):
    args = message.text.split()
    if message.reply_to_message:
        reason = " ".join(args[1:]) if len(args) >= 2 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
        target_user = message.reply_to_message.from_user
    else:
        if len(args) < 3:
            await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç: /warn –ü—Ä–∏—á–∏–Ω–∞ @user –∞–±–æ ID –∞–±–æ reply</b>")
            return
        reason = " ".join(args[1:-1])
        target_user = await resolve_user(message, args)
        if not target_user:
            await message.reply("<b>‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.</b>")
            return

    user_id = str(target_user.id)
    user_name = target_user.full_name
    admin_name = message.from_user.full_name

    current_warnings = data["warnings"].get(user_id, 0) + 1
    data["warnings"][user_id] = current_warnings
    save_data(data)

    await message.answer(
        f"<b>‚ö†Ô∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –≤–∏–¥–∞–≤ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_name}</b>\n"
        f"<b>üìå –ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"<b>üöß –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {current_warnings}/3</b>"
    )

# /ban <—á–∞—Å> <–ø—Ä–∏—á–∏–Ω–∞> [@username|id|reply]
@dp.message(Command("ban"))
async def ban_user(message: Message):
    args = message.text.split()
    if message.reply_to_message:
        reason = " ".join(args[2:]) if len(args) >= 3 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
        target_user = message.reply_to_message.from_user
    else:
        if len(args) < 4:
            await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç: /ban 3d –û–±—Ä–∞–∑–∞ @user –∞–±–æ ID –∞–±–æ reply</b>")
            return
        reason = " ".join(args[2:-1])
        target_user = await resolve_user(message, args)
        if not target_user:
            await message.reply("<b>‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.</b>")
            return

    duration_str = args[1]
    time_multiplier = {"m": "minutes", "h": "hours", "d": "days", "w": "weeks"}

    try:
        unit = duration_str[-1]
        value = int(duration_str[:-1])
        if unit not in time_multiplier:
            raise ValueError

        delta = timedelta(**{time_multiplier[unit]: value})
        ban_end_time = datetime.now() + delta

        user_id = str(target_user.id)
        user_name = target_user.full_name
        admin_name = message.from_user.full_name

        data["banned_users"][user_id] = ban_end_time.isoformat()
        save_data(data)

        # –ó–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        entry = {
            "time": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
            "admin": admin_name,
            "user": user_name,
            "user_id": user_id,
            "action": "ban",
            "reason": reason
        }
        data["history"].append(entry)
        save_data(data)

        await message.answer(
            f"<b>üîí –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –∑–∞–±–∞–Ω–∏–≤ {user_name}</b>\n"
            f"<b>‚è∞ –î–æ {ban_end_time.strftime('%d.%m.%Y %H:%M')}</b>\n"
            f"<b>üìå –ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
        )

    except ValueError:
        await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç —á–∞—Å—É: 2h, 30m, 1d, 1w</b>")
        
@dp.message(Command("history"))
async def history_user(message: Message):
    args = message.text.split()
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    elif len(args) >= 2:
        target_user = await resolve_user(message, args)
    else:
        await message.reply("<b>‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /history @user –∞–±–æ ID –∞–±–æ reply</b>")
        return

    user_id = str(target_user.id)
    user_name = target_user.full_name

    history = data.get("history", {}).get(user_id, [])

    if not history:
        await message.reply(f"<b>üìú –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} —â–µ –Ω–µ–º–∞—î –ø–æ–∫–∞—Ä–∞–Ω—å.</b>")
        return

    text = [f"<b>üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫–∞—Ä–∞–Ω—å {user_name}:</b>"]
    for entry in history:
        if entry["type"] == "warn":
            text.append(f"‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ‚Äî {entry['reason']} ({entry['date']})")
        elif entry["type"] == "mute":
            text.append(f"üîá –ú—É—Ç –¥–æ {entry['until']} ‚Äî {entry['reason']} ({entry['date']})")
        elif entry["type"] == "ban":
            text.append(f"üîí –ë–∞–Ω –¥–æ {entry['until']} ‚Äî {entry['reason']} ({entry['date']})")

    await message.reply("\n".join(text))

# /unbun [@username|id|reply]
@dp.message(Command("unbun"))
async def unbun_user(message: Message):
    args = message.text.split()
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    else:
        if len(args) < 2:
            await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç: /unbun @user –∞–±–æ ID –∞–±–æ reply</b>")
            return
        target_user = await resolve_user(message, args)
        if not target_user:
            await message.reply("<b>‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.</b>")
            return

    user_id = str(target_user.id)
    user_name = target_user.full_name
    admin_name = message.from_user.full_name

    if user_id in data["muted_users"]:
        del data["muted_users"][user_id]
    if user_id in data["warnings"]:
        del data["warnings"][user_id]

    save_data(data)

    await message.answer(
        f"<b>‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –∑–Ω—è–≤ –¥–æ–≤—ñ—á–Ω—É –∑–∞–±–æ—Ä–æ–Ω—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}</b>"
    )

# /report <–ø—Ä–∏—á–∏–Ω–∞> (reply –∞–±–æ –ø—Ä–æ—Å—Ç–æ)
@dp.message(Command("report"))
async def report_user(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.reply("<b>‚ùó –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É: /report <–ø—Ä–∏—á–∏–Ω–∞></b>")
        return

    reporter = message.from_user
    reason = " ".join(args[1:])
    reported_user = message.reply_to_message.from_user if message.reply_to_message else None

    reporter_name = reporter.full_name
    reporter_id = reporter.id

    if reported_user:
        reported_name = reported_user.full_name
        reported_id = reported_user.id
    else:
        reported_name = "‚ùì –ù–µ–≤—ñ–¥–æ–º–æ (–±–µ–∑ reply)"
        reported_id = "‚Äî"

    now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

    report_msg = (
        f"üö® **–ù–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç!**\n"
        f"üë§ –í—ñ–¥: {reporter_name} (`{reporter_id}`)\n"
        f"üéØ –ù–∞: {reported_name} (`{reported_id}`)\n"
        f"üïí –ß–∞—Å: {now}\n"
        f"üìå –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )

    async with aiohttp.ClientSession() as session:
        await session.post(DISCORD_WEBHOOK_URL, json={"content": report_msg})

    await message.reply("<b>‚úÖ –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ä–µ–ø–æ—Ä—Ç –û—á—ñ–∫—É–π—Ç–µ, –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è </b>")

# –ê–≤—Ç–æ–∑–Ω—è—Ç—Ç—è –º—É—Ç–∞
async def check_unmute():
    while True:
        now = datetime.now()
        to_unmute = []
        for user_id, mute_end in data["muted_users"].items():
            if datetime.fromisoformat(mute_end) <= now:
                to_unmute.append(user_id)

        for user_id in to_unmute:
            del data["muted_users"][user_id]
            save_data(data)
        await asyncio.sleep(30)

# –ó–∞–ø—É—Å–∫
async def main():
    asyncio.create_task(check_unmute())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())