import logging
import json
import asyncio
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ChatPermissions
from  aiogram.filters.command import CommandObject
from datetime import datetime, time
from aiogram import types

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from Bot_config import *
from Filters import *
import random
import pandas as pd
from aiogram import F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.exceptions import TelegramBadRequest
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏
try:
    with open(DATA_FILE, "r") as f:
        data = json.load(f)
except FileNotFoundError:
    data = {"muted_users": {}, "warnings": {}}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

# –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (reply, @, ID)
async def resolve_user(message: Message, args):
    if message.reply_to_message:
        return message.reply_to_message.from_user
    if len(args) < 2:
        return None
    target = args[-1]
    if target.startswith("@"):  # @username
        try:
            user = await bot.get_chat(target)
            return user
        except:
            return None
    elif target.isdigit():
        try:
            user = await bot.get_chat(int(target))
            return user
        except:
            return None
    return None

@dp.message(AntiMat())
async def catch_mat(message: Message):
    await message.delete()

    warn_text = (
        f"üö´ <b>{message.from_user.full_name}</b>, "
        "–≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏–ª–æ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É –ª–µ–∫—Å–∏–∫—É —ñ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ."
    )
    await message.answer(warn_text)

@dp.message(AntiBegger())
async def block_begging(message: Message):
    # —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ
    await message.delete()


@dp.message(Command("replyreport"), IsAdmin())
async def reply_report(message: types.Message):

    admin_fullname = message.from_user.full_name
    admin_name = message.from_user.first_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    # –°–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    phrases = [
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥: {role} {admin_fullname} </b>\n\n–í—ñ—Ç–∞—é, {admin_name} –ú—á–∏—Ç—å –≤–∞–º –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É.",
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥: {role} {admin_fullname} </b> {admin_name} –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ!",
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥: {role} {admin_fullname} </b>\n\n{admin_name} –ø–æ—Å–ø—ñ—à–∞—î –≤–∞–º –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É!"
    ]

    # –í–∏–±—ñ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Ñ—Ä–∞–∑–∏
    first_text = random.choice(phrases)
    await message.answer(first_text, parse_mode="HTML")

    # –ó–∞—Ç—Ä–∏–º–∫–∞ 3‚Äì7 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(random.randint(3, 7))

    # –î—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    second_text = (
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ {admin_fullname}</b>\n\n"
        f"–í—ñ—Ç–∞—é, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ {admin_name}, –ø—Ä–∞—Ü—é—é –ø–æ –≤–∞—à—ñ–π –ó–∞—è–≤—Ü—ñ."
    )
    await message.answer(second_text, parse_mode="HTML")


def parse_args(text: str):
    """
    –ü–∞—Ä—Å–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
    <—á–∞—Å –∑ —Å—É—Ñ—ñ–∫—Å–æ–º (m/h/d) –∞–±–æ '–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π'>, <–ø—Ä–∏—á–∏–Ω–∞>
    –∞–±–æ –ø—Ä–æ—Å—Ç–æ <–ø—Ä–∏—á–∏–Ω–∞> (–¥–ª—è warn)
    """
    if not text:
        return None, "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"

    parts = text.split(",", 1)
    time_part = parts[0].strip().lower()
    reason = parts[1].strip() if len(parts) > 1 else None

    # —è–∫—â–æ —î —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏—á–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ warn –º–∞—Ç—é–∫–∏)
    if reason is None and not re.match(r"^\d+[mhd]$|^–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π$", time_part):
        return None, time_part

    if time_part == "–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π":
        return 0, reason or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"

    # –ø–∞—Ä—Å–∏–º–æ —á–∏—Å–ª–æ + —Å—É—Ñ—ñ–∫—Å
    match = re.match(r"^(\d+)([mhd])$", time_part)
    if match:
        value, unit = int(match.group(1)), match.group(2)
        minutes = 0
        if unit == "m":
            minutes = value
        elif unit == "d":
            minutes = value * 60 * 24
        return minutes, reason or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"

    # —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ ‚Üí –≤—Å–µ –≤–≤–∞–∂–∞—î–º–æ –ø—Ä–∏—á–∏–Ω–æ—é
    return None, text.strip()

def parse_duration(duration_str: str):
    """
    –ü–∞—Ä—Å–µ—Ä —Å—Ç—Ä–æ–∫ —Ç–∏–ø—É '120m', '2h', '3d', '–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π'
    –ü–æ–≤–µ—Ä—Ç–∞—î datetime –∞–±–æ None (—è–∫—â–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π)
    """
    duration_str = duration_str.strip().lower()

    if duration_str in ["–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π", "permanent", "perm"]:
        return None  # –±–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è

    unit = duration_str[-1]   # –æ—Å—Ç–∞–Ω–Ω—è –±—É–∫–≤–∞ (m/h/d)
    try:
        value = int(duration_str[:-1])
    except ValueError:
        raise ValueError("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 30m, 2h, 7d, –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π")

    if unit == "m":  # —Ö–≤–∏–ª–∏–Ω–∏
        return datetime.now() + timedelta(minutes=value)
    elif unit == "h":  # –≥–æ–¥–∏–Ω–∏
        return datetime.now() + timedelta(hours=value)
    elif unit == "d":  # –¥–Ω—ñ
        return datetime.now() + timedelta(days=value)
    else:
        raise ValueError("‚ùó –ù–µ–≤—ñ—Ä–Ω–∞ –æ–¥–∏–Ω–∏—Ü—è —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ m (—Ö–≤–∏–ª–∏–Ω–∏), h (–≥–æ–¥–∏–Ω–∏), d (–¥–Ω—ñ).")
\
    # =================== –ö–ê–†–ú–ê ===================
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: data["karma"] = {user_id: —á–∏—Å–ª–æ}
if "karma" not in data:
    data["karma"] = {}

# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ä–º—É –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
def get_user_karma(user_id: int, is_admin: bool = False) -> int:
    if str(user_id) not in data["karma"]:
        data["karma"][str(user_id)] = 1000 if is_admin else 0
        save_data(data)
    return data["karma"][str(user_id)]

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞—Ä–º–æ—é
@dp.message()
async def handle_karma(message: Message):
    if not message.reply_to_message:
        return  # –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    target_user = message.reply_to_message.from_user
    user_id = str(target_user.id)

    text = message.text.strip()

    # –ü–æ–∑–∏—Ç–∏–≤–Ω–∞ –∫–∞—Ä–º–∞ ‚Üí –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ "50" –∞–±–æ "+50"
    if text.isdigit() or (text.startswith("+") and text[1:].isdigit()):
        value = int(text.replace("+", ""))
        new_karma = min(1000, get_user_karma(target_user.id) + value)

    # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞ –∫–∞—Ä–º–∞ ‚Üí —Ç—ñ–ª—å–∫–∏ –∑ "-"
    elif text.startswith("-") and text[1:].isdigit():
        value = int(text)
        new_karma = max(-1000, get_user_karma(target_user.id) + value)

    else:
        return  # –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ —Ñ–æ—Ä–º–∞—Ç

    # –ó–∞–ø–∏—Å—É—î–º–æ
    data["karma"][user_id] = new_karma
    save_data(data)

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å
    await message.reply(
        f"‚öñÔ∏è –ö–∞—Ä–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user.full_name}: <b>{new_karma}</b>\n"
        f"(–ú–∞–∫—Å–∏–º—É–º: 1000 | –ú—ñ–Ω—ñ–º—É–º: -1000)"
    )
    
# ---------------- UNBAN ----------------
@dp.message(Command("unban"))
async def unban_user(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    target_user = message.reply_to_message.from_user
    
    admin_fullname = message.from_user.full_name
    admin_name = message.from_user.first_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    try:
        await bot.unban_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            only_if_banned=True  # ‚úÖ –Ω–µ –±—É–¥–µ –∫—ñ–∫–∞—Ç–∏, —è–∫—â–æ —é–∑–µ—Ä –Ω–µ –≤ –±–∞–Ω—ñ
        )
        
        await message.answer(f"‚úÖ {role} {admin_fullname} –†–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user.full_name}")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–∞–Ω—ñ: {e}")

# ================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê –§–£–ù–ö–¶–Ü–Ø =================
def parse_duration(duration_str: str):
    duration_str = duration_str.lower()
    if duration_str == "–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π":
        return None, "–Ω–∞–∑–∞–≤–∂–¥–∏"

    try:
        num = int("".join(filter(str.isdigit, duration_str)))
    except ValueError:
        return None, None

    if "m" in duration_str:
        return num * 60, f"{num} —Ö–≤–∏–ª–∏–Ω"
    elif "h" in duration_str:
        return num * 3600, f"{num} –≥–æ–¥–∏–Ω"
    elif "d" in duration_str:
        return num * 86400, f"{num} –¥–Ω—ñ–≤"
    return None, None

# ================= BAN =================
@dp.message(Command("ban"))
async def ban_user(message: Message, command: CommandObject):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: /ban <—á–∞—Å –∞–±–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π>, –ø—Ä–∏—á–∏–Ω–∞ (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
        return

    args = command.args
    if not args:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /ban <—á–∞—Å –∞–±–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π>, –ø—Ä–∏—á–∏–Ω–∞")
        return

    parts = args.split(",", 1)
    duration_reason = parts[0].strip()
    reason = parts[1].strip() if len(parts) > 1 else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

    target_user = message.reply_to_message.from_user
    seconds, duration_text = parse_duration(duration_reason)


    admin_fullname = message.from_user.full_name
    admin_name = message.from_user.first_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"

    try:
        # –Ø–∫—â–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π –±–∞–Ω
        if seconds is None:
            until_date = None  # –Ω–µ–º–∞—î –¥–∞—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        else:
            until_date = datetime.now() + timedelta(seconds=seconds)

        # –û–±–º–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False
            ),
            until_date=until_date
        )

        await message.answer(
            f"‚õî {role} {admin_fullname} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user.full_name} "
            f"{duration_text if duration_text else '–Ω–∞–∑–∞–≤–∂–¥–∏'}.\nüìã –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–∞–Ω—ñ: {e}")

# ================= MUTE =================
@dp.message(Command("mute"))
async def mute_user(message: Message, command: CommandObject):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: /mute <—á–∞—Å>, –ø—Ä–∏—á–∏–Ω–∞ (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
        return

    args = command.args
    if not args:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /mute <—á–∞—Å>, –ø—Ä–∏—á–∏–Ω–∞")
        return

    parts = args.split(",", 1)
    duration_reason = parts[0].strip()
    reason = parts[1].strip() if len(parts) > 1 else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

    target_user = message.reply_to_message.from_user
    seconds, duration_text = parse_duration(duration_reason)

    if not seconds:
        await message.reply("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: 10m, 2h, 7d")
        return

    until_date = datetime.now() + timedelta(seconds=seconds)


    admin_fullname = message.from_user.full_name
    admin_name = message.from_user.first_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"


    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        await message.answer(
            f"üîá {role} {admin_fullname} –≤–∏–¥–∞–≤ –º—É—Ç"
            f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user.full_name} –Ω–∞ {duration_text}.\nüìã –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º—É—Ç—ñ: {e}")


# ---------------- UNMUTE ----------------
@dp.message(Command("unmute"))
async def unmute_user(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    target_user = message.reply_to_message.from_user


    user_id = str(target_user.id)
    user_name = target_user.full_name
    admin_fullname = message.from_user.full_name
    admin_name = message.from_user.first_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"

    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )
        await message.answer(f"üîä {role} {admin_fullname} –∑–Ω—è–≤ –º—É—Ç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user.full_name}.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ –º—É—Ç–∞: {e}")
 
# ====================== /userinfo ======================
@dp.message(Command("userinfo"), IsAdmin())
async def history_user(message: Message):
    args = message.text.split()

    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    elif len(args) >= 2:
        target_user = await resolve_user(message, args)
        if not target_user:
            await message.reply("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return
    else:
        await message.reply("<b>‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /userinfo @user –∞–±–æ ID –∞–±–æ reply</b>")
        return

    user_id = str(target_user.id)
    user_name = target_user.full_name

    history = data.get("history", {}).get(user_id, [])

    if not history:
        await message.reply(f"<b>üìú –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} —â–µ –Ω–µ–º–∞—î –ø–æ–∫–∞—Ä–∞–Ω—å.</b>")
        return

    text = [f"<b>üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫–∞—Ä–∞–Ω—å {user_name}:</b>"]
    for i, entry in enumerate(history, start=1):
        if entry["type"] == "warn":
            text.append(f"{i}. ‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ‚Äî {entry['reason']} ({entry['date']})")
        elif entry["type"] == "mute":
            text.append(f"{i}. üîá –ú—É—Ç –¥–æ {entry['until']} ‚Äî {entry['reason']} ({entry['date']})")
        elif entry["type"] == "ban":
            text.append(f"{i}. üîí –ë–∞–Ω –¥–æ {entry['until']} ‚Äî {entry['reason']} ({entry['date']})")
        elif entry["type"] == "kick":
            text.append(f"{i}. üë¢ –ö—ñ–∫ ‚Äî {entry['reason']} ({entry['date']})")

    await message.reply("\n".join(text))


# ====================== /kick ======================
@dp.message(Command("kick"), IsAdmin())
async def kick_user(message: Message):
    args = message.text.split()

    if message.reply_to_message:
        reason = " ".join(args[1:]) if len(args) > 1 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
        target_user = message.reply_to_message.from_user
    else:
        if len(args) < 3:
            await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç: /kick –ü—Ä–∏—á–∏–Ω–∞ @user –∞–±–æ ID –∞–±–æ reply</b>")
            return
        reason = " ".join(args[1:-1])
        target_user = await resolve_user(message, args)
        if not target_user:
            await message.reply("<b>‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.</b>")
            return

    user_id = str(target_user.id)
    user_name = target_user.full_name
    admin_fullname = message.from_user.full_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"

    try:
        # –±–∞–Ω –Ω–∞ 30 —Å–µ–∫ + —Ä–æ–∑–±–∞–Ω = –∫—ñ–∫
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=target_user.id, until_date=datetime.now() + timedelta(seconds=30))
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=target_user.id)

        # –õ–æ–≥ —ñ—Å—Ç–æ—Ä—ñ—ó
        if "history" not in data:
            data["history"] = {}
        if user_id not in data["history"]:
            data["history"][user_id] = []

        data["history"][user_id].append({
            "type": "kick",
            "reason": reason,
            "date": datetime.now().strftime("%d.%m.%Y %H:%M")
        })
        save_data(data)

        await message.answer(
            f"<b>üë¢ {role} {admin_fullname} –í—ñ–¥‚Äô—î–¥–Ω–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}</b>\n"
            f"<b>üìå –ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
        )

    except Exception as e:
        await message.reply(f"<b>‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫—ñ–∫—É: {e}</b>")


# ====================== /warn ======================
@dp.message(Command("warn"), IsAdmin())
async def warn_user(message: Message, command: Command):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    target_user = message.reply_to_message.from_user
    reason = command.args if command.args else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"

    user_id = str(target_user.id)
    user_name = target_user.full_name
    admin_fullname = message.from_user.full_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ –±–∞–∑—É
    if "history" not in data:
        data["history"] = {}
    if user_id not in data["history"]:
        data["history"][user_id] = []

    data["history"][user_id].append({
        "type": "warn",
        "reason": reason,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M")
    })
    save_data(data)

    await message.answer(
        f"‚ö†Ô∏è {role} {admin_fullname} –ü–æ–ø–µ—Ä–µ–¥–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user.full_name}.\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )


# ====================== /unwarn ======================

@dp.message(Command("unwarn"), IsAdmin())
async def unwarn_user(message: Message):
    args = message.text.split()

    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    elif len(args) >= 2:
        target_user = await resolve_user(message, args)
        if not target_user:
            await message.reply("<b>‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.</b>")
            return
    else:
        await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç: /unwarn @user –∞–±–æ ID –∞–±–æ reply</b>")
        return

    user_id = str(target_user.id)
    user_name = target_user.full_name
    admin_fullname = message.from_user.full_name

    history = data.get("history", {}).get(user_id, [])
    if not history:
        await message.reply(f"<b>‚ùó –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å.</b>")
        return


    user_id = str(target_user.id)
    user_name = target_user.full_name
    admin_fullname = message.from_user.full_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"

    # —à—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    for i in range(len(history) - 1, -1, -1):
        if history[i]["type"] == "warn":
            removed = history.pop(i)
            save_data(data)
            await message.answer(
                f"‚úÖ {role} {admin_fullname} –∑–Ω—è–≤ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —É {user_name}.\n"
            )
            return

    await message.reply(f"<b>‚ùó –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –¥–ª—è –∑–Ω—è—Ç—Ç—è.</b>")
    
@dp.message(Command(commands=["help"]))
async def open_panel(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëë –Ø–∫ —Å—Ç–∞—Ç–∏ –Ω–∞ –ê–¥–º—ñ–Ω–∫—É", callback_data="become_an_admin"),
                InlineKeyboardButton(text="‚ùì –ü—Ä–∞–≤–∏–ª–∞", callback_data="chat_rules"),
            ],
            [
                InlineKeyboardButton(text="üëÆ –ú–æ—ó –ø–æ–∫–∞—Ä–∞–Ω–Ω—è", callback_data="my_punishments"),
            ],
            [
                InlineKeyboardButton(text="üí¨ –ë—ñ–ª—å—à–µ", callback_data="more_questions"),
            ],
        ]
    )
    await message.answer("<b>–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:</b>", reply_markup=keyboard)


# /report <–ø—Ä–∏—á–∏–Ω–∞> (reply –∞–±–æ –ø—Ä–æ—Å—Ç–æ)
@dp.message(Command("report"))
async def report_user(message: Message):
    global last_report_time
    args = message.text.split()
    if len(args) < 2:
        await message.reply("<b>‚ùó –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É: /report <–ø—Ä–∏—á–∏–Ω–∞></b>")
        return

    reporter = message.from_user
    reporter_id = str(reporter.id)
    now = datetime.now()

    # === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ ===
    if reporter_id in last_report_time:
        time_diff = (now - last_report_time[reporter_id]).total_seconds()
        if time_diff < 180:  # 3 —Ö–≤–∏–ª–∏–Ω–∏
            wait_time = int(180 - time_diff)
            await message.reply(
                f"<b>‚è≥ –í–∏ –∑–º–æ–∂–µ—Ç–µ –∑–Ω–æ–≤—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ 3 —Ö–≤–∏–ª–∏–Ω–∏.</b>"
            )
            return
    last_report_time[reporter_id] = now
    # =========================

    reason = " ".join(args[1:])
    reported_user = message.reply_to_message.from_user if message.reply_to_message else None

    reporter_name = reporter.full_name

    if reported_user:
        reported_name = reported_user.full_name
        reported_id = reported_user.id
    else:
        reported_name = "‚ùì –ù–µ–≤—ñ–¥–æ–º–æ (–±–µ–∑ reply)"
        reported_id = "‚Äî"

    now_str = now.strftime("%d.%m.%Y %H:%M:%S")

    report_msg = (
        f"üö® **–ù–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç!**\n"
        f"üë§ –í—ñ–¥: {reporter_name} (`{reporter_id}`)\n"
        f"üéØ –ù–∞: {reported_name} (`{reported_id}`)\n"
        f"üïí –ß–∞—Å: {now_str}\n"
        f"üìå –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )

    async with aiohttp.ClientSession() as session:
        await session.post(DISCORD_WEBHOOK_URL, json={"content": report_msg})

    await message.reply(
        "<b>‚úÖ –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ä–µ–ø–æ—Ä—Ç. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>"
    )
    
async def check_unmute():
    while True:
        now = datetime.now()
        # safe copy to avoid "dictionary changed size during iteration"
        for user_id, mute_info in list(data.get("muted_users", {}).items()):
            try:
                # –≤–∏–∑–Ω–∞—á–∞—î–º–æ chat_id —ñ until_iso –ø–æ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                if isinstance(mute_info, dict):
                    until_iso = mute_info.get("until")
                    chat_id = mute_info.get("chat_id")
                else:
                    until_iso = mute_info
                    chat_id = None  # –Ω–µ–º–∞—î chat_id ‚Äî –Ω—ñ—á–æ–≥–æ —Ä–æ–±–∏—Ç–∏ —ñ–∑ Telegram-—á–∞—Å—Ç–∏–Ω–æ—é

                if not until_iso:
                    # –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Å ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
                    del data["muted_users"][user_id]
                    save_data(data)
                    continue

                until_dt = datetime.fromisoformat(until_iso)

                if until_dt <= now:
                    # —è–∫—â–æ –∑–Ω–∞—î–º–æ chat_id ‚Äî –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç—ñ
                    if chat_id is not None:
                        try:
                            await bot.restrict_chat_member(
                                chat_id=int(chat_id),
                                user_id=int(user_id),
                                permissions=ChatPermissions(
                                    can_send_messages=True,
                                    can_send_media_messages=True,
                                    can_send_other_messages=True,
                                    can_add_web_page_previews=True
                                )
                            )
                            logging.info(f"[check_unmute] Unmuted user {user_id} in chat {chat_id}")
                        except Exception as e:
                            logging.exception(f"[check_unmute] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ –º—É—Ç—É (user={user_id}, chat={chat_id}): {e}")
                    else:
                        # –Ø–∫—â–æ chat_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –ª–æ–≥ —ñ –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª–∏–º–æ –ª–æ–∫–∞–ª—å–Ω—É –º—ñ—Ç–∫—É
                        logging.warning(f"[check_unmute] –ù–µ–º–∞—î chat_id –¥–ª—è user {user_id}, –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—é –∑–∞–ø–∏—Å.")

                    # –í–∏–¥–∞–ª—è—î–º–æ –∑ –±–∞–∑–∏ —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
                    if user_id in data.get("muted_users", {}):
                        del data["muted_users"][user_id]
                        save_data(data)

            except Exception as e:
                logging.exception(f"[check_unmute] –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è user {user_id}: {e}")

        await asyncio.sleep(30)  # –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∫–æ–∂–Ω—ñ 30s


# –ó–∞–ø—É—Å–∫
async def main():
    # –Ø–∫—â–æ —Ö–æ—á–µ—à —Å–∫–∏–¥–∞—Ç–∏ webhook ‚Äî –∑—Ä–æ–±–∏ —Ü–µ —Ç—É—Ç (—è–∫ –≤ —Ç–µ–±–µ –±—É–ª–æ)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞—Å–∫—É –∞–≤—Ç–æ–∑–Ω—è—Ç—Ç—è –º—É—Ç–∞ (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π bot)
    asyncio.create_task(check_unmute())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())